{"version":3,"sources":["Indicator.tsx"],"names":["interpolate","interpolateV1","interpolateNode","interpolateV2","require","AnimatedCircle","Animated","createAnimatedComponent","Circle","BORDER_WIDTH","IndicatorComponent","index","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","animatedIndex","item","radius","animatedRadius","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","animatedIconScale","animatedIconOpacity","animatedCircleFillOpacity","containerStyle","styles","container","width","height","iconStyle","iconContainer","left","right","top","bottom","borderRadius","opacity","transform","scale","renderIcon","icon","IconComponent","size","Indicator"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, memo } from 'react';\nimport { ViewStyle } from 'react-native';\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport { Svg, Circle, CircleProps } from 'react-native-svg';\nimport { styles } from './styles';\nimport type { IndicatorProps } from '../../types';\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\n\nconst BORDER_WIDTH = 2;\n\nconst IndicatorComponent = ({\n  index,\n  indicatorSize,\n  indicatorBackgroundColor,\n  indicatorBorderColor,\n  animatedIndex,\n  item,\n}: IndicatorProps) => {\n  const radius = useMemo(() => (indicatorSize - 2) / 2, [indicatorSize]);\n\n  //#region animation\n  const animatedRadius = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [radius * 0.33, radius, radius * 0.33],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index, radius]\n  );\n\n  const animatedIconScale = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [1 * 0.33, 1, 1 * 0.33],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n\n  const animatedIconOpacity = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 0.25, index, index + 0.25],\n        outputRange: [0, 1, 0],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n\n  const animatedCircleFillOpacity = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index],\n        outputRange: [0, 1],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => ({\n      ...styles.container,\n      ...{\n        width: indicatorSize,\n        height: indicatorSize,\n      },\n    }),\n    [indicatorSize]\n  );\n\n  const iconStyle: any = useMemo(\n    () => ({\n      ...styles.iconContainer,\n      ...{\n        left: BORDER_WIDTH * 2,\n        right: BORDER_WIDTH * 2,\n        top: BORDER_WIDTH * 2,\n        bottom: BORDER_WIDTH * 2,\n        borderRadius: indicatorSize,\n        opacity: animatedIconOpacity,\n        transform: [{ scale: animatedIconScale }],\n      },\n    }),\n    [animatedIconOpacity, animatedIconScale, indicatorSize]\n  );\n  //#endregion\n\n  // renders\n  const renderIcon = useCallback(() => {\n    if (item.icon) {\n      const IconComponent: any = item.icon;\n      return (\n        <Animated.View style={iconStyle}>\n          {typeof IconComponent === 'function' ? (\n            IconComponent({\n              size: indicatorSize / 2,\n            })\n          ) : (\n            <IconComponent size={indicatorSize / 2} />\n          )}\n        </Animated.View>\n      );\n    }\n    return null;\n  }, [item, indicatorSize, iconStyle]);\n\n  return (\n    <Animated.View style={containerStyle}>\n      <Svg\n        width={indicatorSize}\n        height={indicatorSize}\n        viewBox={`0 0 ${indicatorSize} ${indicatorSize}`}\n      >\n        <AnimatedCircle\n          r={animatedRadius}\n          cx={indicatorSize / 2}\n          cy={indicatorSize / 2}\n          // @ts-ignore\n          fill={indicatorBackgroundColor}\n          fillOpacity={animatedCircleFillOpacity}\n          stroke={indicatorBorderColor}\n          strokeWidth={BORDER_WIDTH}\n        />\n      </Svg>\n      {renderIcon()}\n    </Animated.View>\n  );\n};\nconst Indicator = memo(IndicatorComponent);\n\nexport default Indicator;\n"]}