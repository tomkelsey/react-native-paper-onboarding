{"version":3,"sources":["CloseButton.tsx"],"names":["CloseButtonComponent","data","safeInsets","animatedIndex","closeButton","closeButtonText","closeButtonTextStyle","textStyleOverride","onCloseButtonPress","containerRef","animatedShowButtonOpacityValues","map","item","index","length","showCloseButton","animatedShowButtonPointerEventValues","defaultShowButtonOpacity","Animated","Value","defaultShowButtonPointerEvent","animatedShowButtonOpacity","animatedShowButtonPointerEvent","containerStyle","styles","container","opacity","top","textStyle","text","CloseButton"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAGO,MAAMA,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,UAFmC;AAGnCC,EAAAA,aAHmC;AAInCC,EAAAA,WAJmC;AAKnCC,EAAAA,eALmC;AAMnCC,EAAAA,oBAAoB,EAAEC,iBANa;AAOnCC,EAAAA;AAPmC,CAAD,KAQZ;AACtB,QAAMC,YAAY,GAAG,mBAAsB,IAAtB,CAArB,CADsB,CAGtB;;AACA,QAAMC,+BAA+B,GAAG,kCACtC,GAAGT,IAAI,CAACU,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KACVA,KAAK,KAAKZ,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA6BF,IAAI,CAACG,eAAlC,GAAoD,CAApD,GAAwD,CADvD,CADmC,CAAxC;AAKA,QAAMC,oCAAoC,GAAG,kCAC3C,GAAGf,IAAI,CAACU,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KACVA,KAAK,KAAKZ,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA6BF,IAAI,CAACG,eAAlC,GAAoD,MAApD,GAA6D,MAD5D,CADwC,CAA7C;AAMA,QAAME,wBAAwB,GAAG,IAAIC,+BAASC,KAAb,CAAmB,CAAnB,CAAjC;AACA,QAAMC,6BAA6B,GAAG,IAAIF,+BAASC,KAAb,CAAmB,MAAnB,CAAtC;AAEA,QAAME,yBAAyB,GAAG,4BAChCX,+BADgC,EAEhC,kCAAMP,aAAN,CAFgC,EAGhCc,wBAHgC,CAAlC;AAMA,QAAMK,8BAA8B,GAAG,6BACrC;AACAN,EAAAA,oCAFqC,EAGrC,kCAAMb,aAAN,CAHqC,EAIrCiB,6BAJqC,CAAvC,CAxBsB,CA8BtB;AAEA;;AACA,QAAMG,cAAmB,GAAG,oBAC1B,MAAM,CACJC,eAAOC,SADH,EAEJ;AACEC,IAAAA,OAAO,EAAEL,yBADX;AAEEM,IAAAA,GAAG,EAAEzB,UAAU,CAACyB;AAFlB,GAFI,CADoB,EAQ1B;AACA,GAACzB,UAAD,CAT0B,CAA5B;AAWA,QAAM0B,SAAS,GAAG,oBAChB,MAAM,CAACJ,eAAOK,IAAR,EAActB,iBAAd,CADU,EAEhB,CAACA,iBAAD,CAFgB,CAAlB,CA5CsB,CAgDtB;;AACA,sBACE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEE,YADP;AAEE,IAAA,aAAa,EAAEa,8BAFjB;AAGE,IAAA,KAAK,EAAEC;AAHT,KAKGnB,WAAW,GACV,OAAOA,WAAP,KAAuB,UAAvB,GACEA,WAAW,EADb,GAGEA,WAJQ,gBAOV,6BAAC,6BAAD;AAAkB,IAAA,OAAO,EAAEI;AAA3B,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEoB;AAAb,KAAyBvB,eAAzB,CADF,CAZJ,CADF;AAmBD,CA5EM;;;AA8EP,MAAMyB,WAAW,gBAAG,iBAAK9B,oBAAL,CAApB;eAEe8B,W","sourcesContent":["import React, { useMemo, memo, useRef } from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport Animated, { round } from 'react-native-reanimated';\nimport { useValues, get } from 'react-native-redash';\nimport { styles } from './styles';\nimport type { CloseButtonProps } from '../../types';\n\nexport const CloseButtonComponent = ({\n  data,\n  safeInsets,\n  animatedIndex,\n  closeButton,\n  closeButtonText,\n  closeButtonTextStyle: textStyleOverride,\n  onCloseButtonPress,\n}: CloseButtonProps) => {\n  const containerRef = useRef<Animated.View>(null);\n\n  //#region animations\n  const animatedShowButtonOpacityValues = useValues(\n    ...data.map((item, index) =>\n      index === data.length - 1 || item.showCloseButton ? 1 : 0\n    )\n  );\n  const animatedShowButtonPointerEventValues = useValues(\n    ...data.map((item, index) =>\n      index === data.length - 1 || item.showCloseButton ? 'auto' : 'none'\n    )\n  );\n\n  const defaultShowButtonOpacity = new Animated.Value(0);\n  const defaultShowButtonPointerEvent = new Animated.Value('none');\n\n  const animatedShowButtonOpacity = get(\n    animatedShowButtonOpacityValues,\n    round(animatedIndex),\n    defaultShowButtonOpacity\n  );\n\n  const animatedShowButtonPointerEvent = get(\n    // @ts-ignore\n    animatedShowButtonPointerEventValues,\n    round(animatedIndex),\n    defaultShowButtonPointerEvent\n  ) as any as Animated.Value<'auto' | 'none'>;\n  //#endregion\n\n  //#region styles\n  const containerStyle: any = useMemo(\n    () => [\n      styles.container,\n      {\n        opacity: animatedShowButtonOpacity,\n        top: safeInsets.top,\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [safeInsets]\n  );\n  const textStyle = useMemo(\n    () => [styles.text, textStyleOverride],\n    [textStyleOverride]\n  );\n  //#endregion\n  return (\n    <Animated.View\n      ref={containerRef}\n      pointerEvents={animatedShowButtonPointerEvent}\n      style={containerStyle}\n    >\n      {closeButton ? (\n        typeof closeButton === 'function' ? (\n          closeButton()\n        ) : (\n          closeButton\n        )\n      ) : (\n        <TouchableOpacity onPress={onCloseButtonPress}>\n          <Text style={textStyle}>{closeButtonText}</Text>\n        </TouchableOpacity>\n      )}\n    </Animated.View>\n  );\n};\n\nconst CloseButton = memo(CloseButtonComponent);\n\nexport default CloseButton;\n"]}