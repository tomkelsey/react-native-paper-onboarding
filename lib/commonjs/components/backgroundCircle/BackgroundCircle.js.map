{"version":3,"sources":["BackgroundCircle.tsx"],"names":["interpolate","interpolateV1","interpolateNode","interpolateV2","require","AnimatedCircle","Animated","createAnimatedComponent","Circle","BackgroundCircleComponent","index","animatedIndex","color","extendedSize","bottomPosition","screenDimensions","indicatorSize","animatedIndicatorsContainerPosition","animatedFocus","inputRange","outputRange","extrapolate","Extrapolate","CLAMP","animatedRadius","animatedLeftPosition","I18nManager","isRTL","width","BackgroundCircle"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AAGA,MAAM;AACJA,EAAAA,WAAW,EAAEC,aADT;AAEJC,EAAAA,eAAe,EAAEC;AAFb,IAGFC,OAAO,CAAC,yBAAD,CAHX;;AAIA,MAAMJ,WAAW,GAAGG,aAAa,IAAIF,aAArC;;AAEA,MAAMI,cAAc,GAAGC,+BAASC,uBAAT,CACrBC,sBADqB,CAAvB;;AAKA,MAAMC,yBAAyB,GAAG,CAAC;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,aAFiC;AAGjCC,EAAAA,KAHiC;AAIjCC,EAAAA,YAJiC;AAKjCC,EAAAA,cALiC;AAMjCC,EAAAA,gBANiC;AAOjCC,EAAAA,aAPiC;AAQjCC,EAAAA;AARiC,CAAD,KASL;AAC3B;AACA;AAEA;AACA,QAAMC,aAAa,GAAG,oBACpB,MACElB,WAAW,CAACW,aAAD,EAAgB;AACzBQ,IAAAA,UAAU,EAAE,CAACT,KAAK,GAAG,CAAT,EAAYA,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CADa;AAEzBU,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY;AAGzBC,IAAAA,WAAW,EAAEC,mCAAYC;AAHA,GAAhB,CAFO,EAOpB,CAACZ,aAAD,EAAgBD,KAAhB,CAPoB,CAAtB;AASA,QAAMc,cAAc,GAAG,oBACrB,MACExB,WAAW,CAACkB,aAAD,EAAgB;AACzBC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADa;AAEzBC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAIP,YAAJ,CAFY;AAGzBQ,IAAAA,WAAW,EAAEC,mCAAYC;AAHA,GAAhB,CAFQ,EAOrB,CAACL,aAAD,EAAgBL,YAAhB,CAPqB,CAAvB;AASA,QAAMY,oBAAoB,GAAG,oBAC3B,MACE,gCACER,mCADF,EAEED,aAAa,GAAG,CAFlB,EAGEU,yBAAYC,KAAZ,GACI,EAAE,CAACjB,KAAK,GAAG,CAAT,IAAcM,aAAhB,CADJ,GAEIN,KAAK,GAAGM,aALd,EAMEU,yBAAYC,KAAZ,GAAoBZ,gBAAgB,CAACa,KAArC,GAA6C,CAN/C,CAFyB,EAU3B,CACEX,mCADF,EAEEP,KAFF,EAGEM,aAHF,EAIED,gBAAgB,CAACa,KAJnB,CAV2B,CAA7B,CAvB2B,CAwC3B;AAEA;;AACA,sBACE,6BAAC,cAAD;AACE,IAAA,CAAC,EAAEJ,cADL;AAEE,IAAA,EAAE,EAAEV,cAFN;AAGE,IAAA,EAAE,EAAEW,oBAHN;AAIE,IAAA,IAAI,EAAEb;AAJR,IADF;AAQD,CA5DD;;AA8DA,MAAMiB,gBAAgB,gBAAG,iBAAKpB,yBAAL,CAAzB;eAEeoB,gB","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { ViewStyle, I18nManager } from 'react-native';\nimport { Circle, CircleProps } from 'react-native-svg';\nimport Animated, { add, Extrapolate } from 'react-native-reanimated';\nimport type { BackgroundCircleProps } from '../../types';\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\nconst BackgroundCircleComponent = ({\n  index,\n  animatedIndex,\n  color,\n  extendedSize,\n  bottomPosition,\n  screenDimensions,\n  indicatorSize,\n  animatedIndicatorsContainerPosition,\n}: BackgroundCircleProps) => {\n  //#region variables\n  //#endregion\n\n  //#region animations\n  const animatedFocus = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [0, 1, 2],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n  const animatedRadius = useMemo(\n    () =>\n      interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [0, extendedSize],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedFocus, extendedSize]\n  );\n  const animatedLeftPosition = useMemo(\n    () =>\n      add(\n        animatedIndicatorsContainerPosition,\n        indicatorSize / 2,\n        I18nManager.isRTL\n          ? -((index + 1) * indicatorSize)\n          : index * indicatorSize,\n        I18nManager.isRTL ? screenDimensions.width : 0\n      ),\n    [\n      animatedIndicatorsContainerPosition,\n      index,\n      indicatorSize,\n      screenDimensions.width,\n    ]\n  );\n  //#endregion\n\n  // render\n  return (\n    <AnimatedCircle\n      r={animatedRadius}\n      cy={bottomPosition}\n      cx={animatedLeftPosition}\n      fill={color}\n    />\n  );\n};\n\nconst BackgroundCircle = memo(BackgroundCircleComponent);\n\nexport default BackgroundCircle;\n"]}