{"version":3,"sources":["IndicatorsContainer.tsx"],"names":["IndicatorsContainerComponent","data","animatedIndex","animatedIndicatorsContainerPosition","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","safeInsets","containerWidth","length","containerStyle","styles","container","width","height","bottom","transform","translateX","renderIndicators","map","item","index","IndicatorsContainer"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAGA,MAAMA,4BAA4B,GAAG,CAAC;AACpCC,EAAAA,IADoC;AAEpCC,EAAAA,aAFoC;AAGpCC,EAAAA,mCAHoC;AAIpCC,EAAAA,aAJoC;AAKpCC,EAAAA,wBALoC;AAMpCC,EAAAA,oBANoC;AAOpCC,EAAAA;AAPoC,CAAD,KAQL;AAC9B;AACA,QAAMC,cAAc,GAAG,oBAAQ,MAAM;AACnC,WAAOP,IAAI,CAACQ,MAAL,GAAcL,aAArB;AACD,GAFsB,EAEpB,CAACH,IAAD,EAAOG,aAAP,CAFoB,CAAvB,CAF8B,CAM9B;;AACA,QAAMM,cAAmB,GAAG,oBAC1B,MAAM,CACJC,eAAOC,SADH,EAEJ;AACEC,IAAAA,KAAK,EAAEL,cADT;AAEEM,IAAAA,MAAM,EAAEV,aAFV;AAGEW,IAAAA,MAAM,EAAER,UAAU,CAACQ,MAHrB;AAIEC,IAAAA,SAAS,EAAE,CAAC;AAAEC,MAAAA,UAAU,EAAEd;AAAd,KAAD;AAJb,GAFI,CADoB,EAU1B,CACEK,cADF,EAEEJ,aAFF,EAGED,mCAHF,EAIEI,UAJF,CAV0B,CAA5B,CAP8B,CAyB9B;;AACA,QAAMW,gBAAgB,GAAG,wBACvB,MACEjB,IAAI,CAACkB,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxB,wBACE,6BAAC,kBAAD;AACE,MAAA,GAAG,EAAG,QAAOA,KAAM,EADrB;AAEE,MAAA,aAAa,EAAEjB,aAFjB;AAGE,MAAA,wBAAwB,EAAEC,wBAH5B;AAIE,MAAA,oBAAoB,EAAEC,oBAJxB;AAKE,MAAA,KAAK,EAAEe,KALT;AAME,MAAA,IAAI,EAAED,IANR;AAOE,MAAA,aAAa,EAAElB;AAPjB,MADF;AAWD,GAZD,CAFqB,EAevB;AACA,GAACD,IAAD,EAAOG,aAAP,EAAsBC,wBAAtB,EAAgDC,oBAAhD,CAhBuB,CAAzB;AAmBA,sBACE,6BAAC,8BAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAEI;AAAtB,KAAuCQ,gBAAgB,EAAvD,CADF;AAGD,CAxDD;;AA0DA,MAAMI,mBAAmB,gBAAG,iBAAKtB,4BAAL,CAA5B;eAEesB,mB","sourcesContent":["import React, { useMemo, useCallback, memo } from 'react';\nimport Animated from 'react-native-reanimated';\nimport Indicator from '../indicator';\nimport { styles } from './styles';\nimport type { IndicatorsContainerProps } from '../../types';\n\nconst IndicatorsContainerComponent = ({\n  data,\n  animatedIndex,\n  animatedIndicatorsContainerPosition,\n  indicatorSize,\n  indicatorBackgroundColor,\n  indicatorBorderColor,\n  safeInsets,\n}: IndicatorsContainerProps) => {\n  // variables\n  const containerWidth = useMemo(() => {\n    return data.length * indicatorSize;\n  }, [data, indicatorSize]);\n\n  // style\n  const containerStyle: any = useMemo(\n    () => [\n      styles.container,\n      {\n        width: containerWidth,\n        height: indicatorSize,\n        bottom: safeInsets.bottom,\n        transform: [{ translateX: animatedIndicatorsContainerPosition }],\n      },\n    ],\n    [\n      containerWidth,\n      indicatorSize,\n      animatedIndicatorsContainerPosition,\n      safeInsets,\n    ]\n  );\n\n  // renders\n  const renderIndicators = useCallback(\n    () =>\n      data.map((item, index) => {\n        return (\n          <Indicator\n            key={`item-${index}`}\n            indicatorSize={indicatorSize}\n            indicatorBackgroundColor={indicatorBackgroundColor}\n            indicatorBorderColor={indicatorBorderColor}\n            index={index}\n            item={item}\n            animatedIndex={animatedIndex}\n          />\n        );\n      }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, indicatorSize, indicatorBackgroundColor, indicatorBorderColor]\n  );\n\n  return (\n    <Animated.View style={containerStyle}>{renderIndicators()}</Animated.View>\n  );\n};\n\nconst IndicatorsContainer = memo(IndicatorsContainerComponent);\n\nexport default IndicatorsContainer;\n"]}