{"version":3,"sources":["PaperOnboarding.tsx"],"names":["Animated","addWhitelistedUIProps","cx","cy","r","fillOpacity","pointerEvents","interpolate","interpolateV1","interpolateNode","interpolateV2","require","PaperOnboardingComponent","data","safeInsets","_safeInsets","direction","DEFAULT_DIRECTION","indicatorSize","DEFAULT_INDICATOR_SIZE","indicatorBackgroundColor","DEFAULT_INDICATOR_BACKGROUND_COLOR","indicatorBorderColor","DEFAULT_INDICATOR_BORDER_COLOR","titleStyle","descriptionStyle","closeButton","closeButtonTextStyle","closeButtonText","DEFAULT_CLOSE_BUTTON_TEXT","onCloseButtonPress","DEFAULT_CLOSE_BUTTON_CALLBACK","onIndexChange","ref","dimensions","setDimensions","width","Dimensions","get","height","indexRef","pagesRef","map","top","DEFAULT_SAFE_INSET","bottom","left","right","indicatorsContainerLeftPadding","containerLeftPadding","I18nManager","isRTL","length","gestureHandler","state","translation","velocity","animatedStaticIndex","animatedOverrideIndex","animatedIndex","value","x","y","size","screenWidth","indicatorsContainerPosition","_","index","animatedIndicatorsContainerPosition","inputRange","outputRange","reverse","extrapolate","Extrapolate","CLAMP","handlePageRef","pageRef","current","handleOnLayout","nativeEvent","layout","handleNavigateToNextPage","currentIndex","setValue","handleNavigateToPreviousPage","next","previous","args","_index","setNativeProps","styles","container","item","PaperOnboarding"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useCallback,\n  memo,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport {\n  Dimensions,\n  Insets,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport { usePanGestureHandler, useValue } from 'react-native-redash';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, {\n  add,\n  useCode,\n  onChange,\n  call,\n} from 'react-native-reanimated';\nimport Background from './components/background';\nimport Page from './components/page';\nimport IndicatorsContainer from './components/indicatorsContainer';\nimport CloseButton from './components/closeButton';\nimport { useTiming } from './useTiming';\nimport {\n  DEFAULT_SAFE_INSET,\n  DEFAULT_DIRECTION,\n  DEFAULT_INDICATOR_SIZE,\n  DEFAULT_INDICATOR_BORDER_COLOR,\n  DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  DEFAULT_CLOSE_BUTTON_TEXT,\n  DEFAULT_CLOSE_BUTTON_CALLBACK,\n} from './constants';\nimport { styles } from './styles';\nimport type {\n  PaperOnboardingProps,\n  PaperOnboardingMethods,\n  PaperOnboardingScreenDimensions,\n} from './types';\n\n// @ts-ignore\nAnimated.addWhitelistedUIProps({\n  cx: true,\n  cy: true,\n  r: true,\n  fillOpacity: true,\n  pointerEvents: true,\n});\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\ntype PaperOnboarding = PaperOnboardingMethods;\n\nconst PaperOnboardingComponent = forwardRef<\n  PaperOnboarding,\n  PaperOnboardingProps\n>(\n  (\n    {\n      data,\n      safeInsets: _safeInsets,\n      direction = DEFAULT_DIRECTION,\n      // indicator config\n      indicatorSize = DEFAULT_INDICATOR_SIZE,\n      indicatorBackgroundColor = DEFAULT_INDICATOR_BACKGROUND_COLOR,\n      indicatorBorderColor = DEFAULT_INDICATOR_BORDER_COLOR,\n      // override styles\n      titleStyle,\n      descriptionStyle,\n      // close button config\n      closeButton,\n      closeButtonTextStyle,\n      closeButtonText = DEFAULT_CLOSE_BUTTON_TEXT,\n      onCloseButtonPress = DEFAULT_CLOSE_BUTTON_CALLBACK,\n      onIndexChange,\n    },\n    ref\n  ) => {\n    // state\n    const [dimensions, setDimensions] =\n      useState<PaperOnboardingScreenDimensions>({\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n      });\n\n    // refs\n    const indexRef = useRef<number>(0);\n    const pagesRef = useRef<Array<Animated.View | null>>(data.map(() => null));\n\n    //#region variables\n    const safeInsets = useMemo<Required<Insets>>(() => {\n      return {\n        top: _safeInsets?.top ?? DEFAULT_SAFE_INSET,\n        bottom: _safeInsets?.bottom ?? DEFAULT_SAFE_INSET,\n        left: _safeInsets?.left ?? DEFAULT_SAFE_INSET,\n        right: _safeInsets?.right ?? DEFAULT_SAFE_INSET,\n      };\n    }, [_safeInsets]);\n    const indicatorsContainerLeftPadding = useMemo(() => {\n      const containerLeftPadding = dimensions.width / 2 - indicatorSize / 2;\n      return I18nManager.isRTL\n        ? -containerLeftPadding + indicatorSize * (data.length - 1)\n        : containerLeftPadding;\n    }, [dimensions.width, indicatorSize, data.length]);\n    //#endregion\n\n    //#region animated variables\n    const { gestureHandler, state, translation, velocity } =\n      usePanGestureHandler();\n    const animatedStaticIndex = useValue<number>(0);\n    const animatedOverrideIndex = useValue<number>(0);\n    const animatedIndex = useTiming({\n      animatedStaticIndex,\n      animatedOverrideIndex,\n      value: direction === 'horizontal' ? translation.x : translation.y,\n      velocity: direction === 'horizontal' ? velocity.x : velocity.y,\n      state: state,\n      size: data.length,\n      screenWidth: dimensions.width,\n    });\n    const indicatorsContainerPosition = useMemo(\n      () => data.map((_, index) => index * indicatorSize * -1),\n      [data, indicatorSize]\n    );\n    const animatedIndicatorsContainerPosition = useMemo(\n      () =>\n        add(\n          interpolate(animatedIndex, {\n            inputRange: data.map((_, index) => index),\n            outputRange: I18nManager.isRTL\n              ? indicatorsContainerPosition.reverse()\n              : indicatorsContainerPosition,\n            extrapolate: Animated.Extrapolate.CLAMP,\n          }),\n          indicatorsContainerLeftPadding\n        ),\n      [\n        data,\n        animatedIndex,\n        indicatorsContainerLeftPadding,\n        indicatorsContainerPosition,\n      ]\n    );\n    //#endregion\n\n    //#region callbacks\n    const handlePageRef = useCallback((pageRef, index) => {\n      pagesRef.current[index] = pageRef;\n    }, []);\n\n    const handleOnLayout = useCallback(\n      ({\n        nativeEvent: {\n          layout: { width, height },\n        },\n      }: LayoutChangeEvent) => {\n        setDimensions({\n          width,\n          height,\n        });\n      },\n      []\n    );\n    //#endregion\n\n    //#region public methods\n    const handleNavigateToNextPage = useCallback(() => {\n      const currentIndex = indexRef.current;\n      if (currentIndex === data.length - 1) {\n        return;\n      }\n      animatedOverrideIndex.setValue(currentIndex + 1);\n    }, [data, animatedOverrideIndex]);\n    const handleNavigateToPreviousPage = useCallback(() => {\n      const currentIndex = indexRef.current;\n      if (currentIndex === 0) {\n        return;\n      }\n      animatedOverrideIndex.setValue(currentIndex - 1);\n    }, [animatedOverrideIndex]);\n    useImperativeHandle(\n      ref,\n      () => ({\n        next: handleNavigateToNextPage,\n        previous: handleNavigateToPreviousPage,\n      }),\n      [handleNavigateToNextPage, handleNavigateToPreviousPage]\n    );\n    //#endregion\n\n    //#region effects\n    useCode(\n      () =>\n        onChange(\n          animatedStaticIndex,\n          call([animatedStaticIndex], args => {\n            indexRef.current = args[0];\n            /**\n             * @DEV\n             * here we directly manipulate pages native props by setting `pointerEvents`\n             * to `auto` for current page and `none` for others.\n             */\n            pagesRef.current.map((pageRef, _index) => {\n              // @ts-ignore\n              pageRef.setNativeProps({\n                pointerEvents: _index === args[0] ? 'auto' : 'none',\n              });\n            });\n\n            if (onIndexChange) {\n              onIndexChange(args[0]);\n            }\n          })\n        ),\n      []\n    );\n    //#endregion\n\n    // renders\n    return (\n      <PanGestureHandler {...gestureHandler}>\n        <Animated.View onLayout={handleOnLayout} style={styles.container}>\n          <Background\n            animatedIndex={animatedIndex}\n            data={data}\n            safeInsets={safeInsets}\n            screenDimensions={dimensions}\n            indicatorSize={indicatorSize}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n          />\n\n          {data.map((item, index) => (\n            <Page\n              key={`page-${index}`}\n              index={index}\n              item={item}\n              next={handleNavigateToNextPage}\n              animatedIndex={animatedIndex}\n              indicatorSize={indicatorSize}\n              titleStyle={titleStyle}\n              descriptionStyle={descriptionStyle}\n              safeInsets={safeInsets}\n              screenDimensions={dimensions}\n              handleRef={handlePageRef}\n            />\n          ))}\n\n          <IndicatorsContainer\n            data={data}\n            animatedIndex={animatedIndex}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n            indicatorSize={indicatorSize}\n            indicatorBackgroundColor={indicatorBackgroundColor}\n            indicatorBorderColor={indicatorBorderColor}\n            safeInsets={safeInsets}\n          />\n\n          <CloseButton\n            data={data}\n            animatedIndex={animatedIndex}\n            safeInsets={safeInsets}\n            closeButtonText={closeButtonText}\n            closeButtonTextStyle={closeButtonTextStyle}\n            closeButton={closeButton}\n            onCloseButtonPress={onCloseButtonPress}\n          />\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n);\n\nconst PaperOnboarding = memo(PaperOnboardingComponent);\n\nexport default PaperOnboarding;\n"]}