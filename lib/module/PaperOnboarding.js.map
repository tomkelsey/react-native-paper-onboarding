{"version":3,"sources":["PaperOnboarding.tsx"],"names":["React","useMemo","useRef","useCallback","memo","useState","forwardRef","useImperativeHandle","Dimensions","I18nManager","usePanGestureHandler","useValue","PanGestureHandler","Animated","add","useCode","onChange","call","Background","Page","IndicatorsContainer","CloseButton","useTiming","DEFAULT_SAFE_INSET","DEFAULT_DIRECTION","DEFAULT_INDICATOR_SIZE","DEFAULT_INDICATOR_BORDER_COLOR","DEFAULT_INDICATOR_BACKGROUND_COLOR","DEFAULT_CLOSE_BUTTON_TEXT","DEFAULT_CLOSE_BUTTON_CALLBACK","styles","addWhitelistedUIProps","cx","cy","r","fillOpacity","pointerEvents","interpolate","interpolateV1","interpolateNode","interpolateV2","require","PaperOnboardingComponent","data","safeInsets","_safeInsets","direction","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","titleStyle","descriptionStyle","closeButton","closeButtonTextStyle","closeButtonText","onCloseButtonPress","onIndexChange","ref","dimensions","setDimensions","width","get","height","indexRef","pagesRef","map","top","bottom","left","right","indicatorsContainerLeftPadding","containerLeftPadding","isRTL","length","gestureHandler","state","translation","velocity","animatedStaticIndex","animatedOverrideIndex","animatedIndex","value","x","y","size","screenWidth","indicatorsContainerPosition","_","index","animatedIndicatorsContainerPosition","inputRange","outputRange","reverse","extrapolate","Extrapolate","CLAMP","handlePageRef","pageRef","current","handleOnLayout","nativeEvent","layout","handleNavigateToNextPage","currentIndex","setValue","handleNavigateToPreviousPage","next","previous","args","_index","setNativeProps","container","item","PaperOnboarding"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useCallback,\n  memo,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n} from 'react';\nimport {\n  Dimensions,\n  Insets,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport { usePanGestureHandler, useValue } from 'react-native-redash';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\nimport Animated, {\n  add,\n  useCode,\n  onChange,\n  call,\n} from 'react-native-reanimated';\nimport Background from './components/background';\nimport Page from './components/page';\nimport IndicatorsContainer from './components/indicatorsContainer';\nimport CloseButton from './components/closeButton';\nimport { useTiming } from './useTiming';\nimport {\n  DEFAULT_SAFE_INSET,\n  DEFAULT_DIRECTION,\n  DEFAULT_INDICATOR_SIZE,\n  DEFAULT_INDICATOR_BORDER_COLOR,\n  DEFAULT_INDICATOR_BACKGROUND_COLOR,\n  DEFAULT_CLOSE_BUTTON_TEXT,\n  DEFAULT_CLOSE_BUTTON_CALLBACK,\n} from './constants';\nimport { styles } from './styles';\nimport type {\n  PaperOnboardingProps,\n  PaperOnboardingMethods,\n  PaperOnboardingScreenDimensions,\n} from './types';\n\n// @ts-ignore\nAnimated.addWhitelistedUIProps({\n  cx: true,\n  cy: true,\n  r: true,\n  fillOpacity: true,\n  pointerEvents: true,\n});\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\ntype PaperOnboarding = PaperOnboardingMethods;\n\nconst PaperOnboardingComponent = forwardRef<\n  PaperOnboarding,\n  PaperOnboardingProps\n>(\n  (\n    {\n      data,\n      safeInsets: _safeInsets,\n      direction = DEFAULT_DIRECTION,\n      // indicator config\n      indicatorSize = DEFAULT_INDICATOR_SIZE,\n      indicatorBackgroundColor = DEFAULT_INDICATOR_BACKGROUND_COLOR,\n      indicatorBorderColor = DEFAULT_INDICATOR_BORDER_COLOR,\n      // override styles\n      titleStyle,\n      descriptionStyle,\n      // close button config\n      closeButton,\n      closeButtonTextStyle,\n      closeButtonText = DEFAULT_CLOSE_BUTTON_TEXT,\n      onCloseButtonPress = DEFAULT_CLOSE_BUTTON_CALLBACK,\n      onIndexChange,\n    },\n    ref\n  ) => {\n    // state\n    const [dimensions, setDimensions] =\n      useState<PaperOnboardingScreenDimensions>({\n        width: Dimensions.get('window').width,\n        height: Dimensions.get('window').height,\n      });\n\n    // refs\n    const indexRef = useRef<number>(0);\n    const pagesRef = useRef<Array<Animated.View | null>>(data.map(() => null));\n\n    //#region variables\n    const safeInsets = useMemo<Required<Insets>>(() => {\n      return {\n        top: _safeInsets?.top ?? DEFAULT_SAFE_INSET,\n        bottom: _safeInsets?.bottom ?? DEFAULT_SAFE_INSET,\n        left: _safeInsets?.left ?? DEFAULT_SAFE_INSET,\n        right: _safeInsets?.right ?? DEFAULT_SAFE_INSET,\n      };\n    }, [_safeInsets]);\n    const indicatorsContainerLeftPadding = useMemo(() => {\n      const containerLeftPadding = dimensions.width / 2 - indicatorSize / 2;\n      return I18nManager.isRTL\n        ? -containerLeftPadding + indicatorSize * (data.length - 1)\n        : containerLeftPadding;\n    }, [dimensions.width, indicatorSize, data.length]);\n    //#endregion\n\n    //#region animated variables\n    const { gestureHandler, state, translation, velocity } =\n      usePanGestureHandler();\n    const animatedStaticIndex = useValue<number>(0);\n    const animatedOverrideIndex = useValue<number>(0);\n    const animatedIndex = useTiming({\n      animatedStaticIndex,\n      animatedOverrideIndex,\n      value: direction === 'horizontal' ? translation.x : translation.y,\n      velocity: direction === 'horizontal' ? velocity.x : velocity.y,\n      state: state,\n      size: data.length,\n      screenWidth: dimensions.width,\n    });\n    const indicatorsContainerPosition = useMemo(\n      () => data.map((_, index) => index * indicatorSize * -1),\n      [data, indicatorSize]\n    );\n    const animatedIndicatorsContainerPosition = useMemo(\n      () =>\n        add(\n          interpolate(animatedIndex, {\n            inputRange: data.map((_, index) => index),\n            outputRange: I18nManager.isRTL\n              ? indicatorsContainerPosition.reverse()\n              : indicatorsContainerPosition,\n            extrapolate: Animated.Extrapolate.CLAMP,\n          }),\n          indicatorsContainerLeftPadding\n        ),\n      [\n        data,\n        animatedIndex,\n        indicatorsContainerLeftPadding,\n        indicatorsContainerPosition,\n      ]\n    );\n    //#endregion\n\n    //#region callbacks\n    const handlePageRef = useCallback((pageRef, index) => {\n      pagesRef.current[index] = pageRef;\n    }, []);\n\n    const handleOnLayout = useCallback(\n      ({\n        nativeEvent: {\n          layout: { width, height },\n        },\n      }: LayoutChangeEvent) => {\n        setDimensions({\n          width,\n          height,\n        });\n      },\n      []\n    );\n    //#endregion\n\n    //#region public methods\n    const handleNavigateToNextPage = useCallback(() => {\n      const currentIndex = indexRef.current;\n      if (currentIndex === data.length - 1) {\n        return;\n      }\n      animatedOverrideIndex.setValue(currentIndex + 1);\n    }, [data, animatedOverrideIndex]);\n    const handleNavigateToPreviousPage = useCallback(() => {\n      const currentIndex = indexRef.current;\n      if (currentIndex === 0) {\n        return;\n      }\n      animatedOverrideIndex.setValue(currentIndex - 1);\n    }, [animatedOverrideIndex]);\n    useImperativeHandle(\n      ref,\n      () => ({\n        next: handleNavigateToNextPage,\n        previous: handleNavigateToPreviousPage,\n      }),\n      [handleNavigateToNextPage, handleNavigateToPreviousPage]\n    );\n    //#endregion\n\n    //#region effects\n    useCode(\n      () =>\n        onChange(\n          animatedStaticIndex,\n          call([animatedStaticIndex], args => {\n            indexRef.current = args[0];\n            /**\n             * @DEV\n             * here we directly manipulate pages native props by setting `pointerEvents`\n             * to `auto` for current page and `none` for others.\n             */\n            pagesRef.current.map((pageRef, _index) => {\n              // @ts-ignore\n              pageRef.setNativeProps({\n                pointerEvents: _index === args[0] ? 'auto' : 'none',\n              });\n            });\n\n            if (onIndexChange) {\n              onIndexChange(args[0]);\n            }\n          })\n        ),\n      []\n    );\n    //#endregion\n\n    // renders\n    return (\n      <PanGestureHandler {...gestureHandler}>\n        <Animated.View onLayout={handleOnLayout} style={styles.container}>\n          <Background\n            animatedIndex={animatedIndex}\n            data={data}\n            safeInsets={safeInsets}\n            screenDimensions={dimensions}\n            indicatorSize={indicatorSize}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n          />\n\n          {data.map((item, index) => (\n            <Page\n              key={`page-${index}`}\n              index={index}\n              item={item}\n              next={handleNavigateToNextPage}\n              animatedIndex={animatedIndex}\n              indicatorSize={indicatorSize}\n              titleStyle={titleStyle}\n              descriptionStyle={descriptionStyle}\n              safeInsets={safeInsets}\n              screenDimensions={dimensions}\n              handleRef={handlePageRef}\n            />\n          ))}\n\n          <IndicatorsContainer\n            data={data}\n            animatedIndex={animatedIndex}\n            animatedIndicatorsContainerPosition={\n              animatedIndicatorsContainerPosition\n            }\n            indicatorSize={indicatorSize}\n            indicatorBackgroundColor={indicatorBackgroundColor}\n            indicatorBorderColor={indicatorBorderColor}\n            safeInsets={safeInsets}\n          />\n\n          <CloseButton\n            data={data}\n            animatedIndex={animatedIndex}\n            safeInsets={safeInsets}\n            closeButtonText={closeButtonText}\n            closeButtonTextStyle={closeButtonTextStyle}\n            closeButton={closeButton}\n            onCloseButtonPress={onCloseButtonPress}\n          />\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n);\n\nconst PaperOnboarding = memo(PaperOnboardingComponent);\n\nexport default PaperOnboarding;\n"]}