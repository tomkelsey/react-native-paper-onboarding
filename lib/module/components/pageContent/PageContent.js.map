{"version":3,"sources":["PageContent.tsx"],"names":["React","useMemo","memo","Text","Dimensions","TouchableOpacity","Animated","Extrapolate","Color","styles","interpolate","interpolateV1","interpolateNode","interpolateV2","require","SCREEN_HEIGHT","get","height","PageContentComponent","animatedFocus","image","title","next","buttonText","onButtonPress","description","backgroundColor","titleStyle","titleStyleOverride","descriptionStyle","descriptionStyleOverride","animatedImageTopPosition","inputRange","outputRange","extrapolate","CLAMP","imageContainerStyle","imageContainer","transform","translateY","console","log","nextStyle","darken","string","nextText","PageContent"],"mappings":"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","sourcesContent":["import React, { useMemo, memo } from 'react';\nimport { Text, Dimensions, TouchableOpacity } from 'react-native';\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport Color from 'color';\nimport { styles } from './styles';\nimport type { PageContentProps } from '../../types';\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\nconst SCREEN_HEIGHT = Dimensions.get('window').height;\n\nconst PageContentComponent = ({\n  animatedFocus,\n  image,\n  title,\n  next,\n  buttonText = 'Next',\n  onButtonPress,\n  description,\n  backgroundColor,\n  titleStyle: titleStyleOverride,\n  descriptionStyle: descriptionStyleOverride,\n}: PageContentProps) => {\n  //#region\n  const animatedImageTopPosition = interpolate(animatedFocus, {\n    inputRange: [0, 1],\n    outputRange: [SCREEN_HEIGHT / 8, 0],\n    extrapolate: Extrapolate.CLAMP,\n  });\n  //#endregion\n\n  //#region styles\n  const titleStyle = useMemo(\n    () => [styles.title, titleStyleOverride],\n    [titleStyleOverride]\n  );\n\n  const descriptionStyle = useMemo(\n    () => [styles.description, descriptionStyleOverride],\n    [descriptionStyleOverride]\n  );\n\n  const imageContainerStyle: any = useMemo(\n    () => [\n      styles.imageContainer,\n      {\n        transform: [{ translateY: animatedImageTopPosition }],\n      },\n    ],\n    [animatedImageTopPosition]\n  );\n\n  console.log('next: ', next);\n  const nextStyle = useMemo(\n    () => [\n      styles.next,\n      { backgroundColor: Color(backgroundColor).darken(0.2).string() },\n    ],\n    [backgroundColor]\n  );\n\n  //#endregion\n  return (\n    <>\n      {image && (\n        <Animated.View style={imageContainerStyle}>\n          {typeof image === 'function' ? image() : image}\n        </Animated.View>\n      )}\n      <Text style={titleStyle}>{title}</Text>\n      <Text style={descriptionStyle}>{description}</Text>\n      <TouchableOpacity onPress={onButtonPress || next} style={nextStyle}>\n        <Text style={styles.nextText}>{buttonText}</Text>\n      </TouchableOpacity>\n    </>\n  );\n};\n\nconst PageContent = memo(PageContentComponent);\n\nexport default PageContent;\n"]}