{"version":3,"sources":["BackgroundCircle.tsx"],"names":["React","memo","useMemo","I18nManager","Circle","Animated","add","Extrapolate","interpolate","interpolateV1","interpolateNode","interpolateV2","require","AnimatedCircle","createAnimatedComponent","BackgroundCircleComponent","index","animatedIndex","color","extendedSize","bottomPosition","screenDimensions","indicatorSize","animatedIndicatorsContainerPosition","animatedFocus","inputRange","outputRange","extrapolate","CLAMP","animatedRadius","animatedLeftPosition","isRTL","width","BackgroundCircle"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,OAAtB,QAAqC,OAArC;AACA,SAAoBC,WAApB,QAAuC,cAAvC;AACA,SAASC,MAAT,QAAoC,kBAApC;AACA,OAAOC,QAAP,IAAmBC,GAAnB,EAAwBC,WAAxB,QAA2C,yBAA3C;;AAGA,MAAM;AACJC,EAAAA,WAAW,EAAEC,aADT;AAEJC,EAAAA,eAAe,EAAEC;AAFb,IAGFC,OAAO,CAAC,yBAAD,CAHX;;AAIA,MAAMJ,WAAW,GAAGG,aAAa,IAAIF,aAArC;AAEA,MAAMI,cAAc,GAAGR,QAAQ,CAACS,uBAAT,CACrBV,MADqB,CAAvB;;AAKA,MAAMW,yBAAyB,GAAG,CAAC;AACjCC,EAAAA,KADiC;AAEjCC,EAAAA,aAFiC;AAGjCC,EAAAA,KAHiC;AAIjCC,EAAAA,YAJiC;AAKjCC,EAAAA,cALiC;AAMjCC,EAAAA,gBANiC;AAOjCC,EAAAA,aAPiC;AAQjCC,EAAAA;AARiC,CAAD,KASL;AAC3B;AACA;AAEA;AACA,QAAMC,aAAa,GAAGtB,OAAO,CAC3B,MACEM,WAAW,CAACS,aAAD,EAAgB;AACzBQ,IAAAA,UAAU,EAAE,CAACT,KAAK,GAAG,CAAT,EAAYA,KAAZ,EAAmBA,KAAK,GAAG,CAA3B,CADa;AAEzBU,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY;AAGzBC,IAAAA,WAAW,EAAEpB,WAAW,CAACqB;AAHA,GAAhB,CAFc,EAO3B,CAACX,aAAD,EAAgBD,KAAhB,CAP2B,CAA7B;AASA,QAAMa,cAAc,GAAG3B,OAAO,CAC5B,MACEM,WAAW,CAACgB,aAAD,EAAgB;AACzBC,IAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADa;AAEzBC,IAAAA,WAAW,EAAE,CAAC,CAAD,EAAIP,YAAJ,CAFY;AAGzBQ,IAAAA,WAAW,EAAEpB,WAAW,CAACqB;AAHA,GAAhB,CAFe,EAO5B,CAACJ,aAAD,EAAgBL,YAAhB,CAP4B,CAA9B;AASA,QAAMW,oBAAoB,GAAG5B,OAAO,CAClC,MACEI,GAAG,CACDiB,mCADC,EAEDD,aAAa,GAAG,CAFf,EAGDnB,WAAW,CAAC4B,KAAZ,GACI,EAAE,CAACf,KAAK,GAAG,CAAT,IAAcM,aAAhB,CADJ,GAEIN,KAAK,GAAGM,aALX,EAMDnB,WAAW,CAAC4B,KAAZ,GAAoBV,gBAAgB,CAACW,KAArC,GAA6C,CAN5C,CAF6B,EAUlC,CACET,mCADF,EAEEP,KAFF,EAGEM,aAHF,EAIED,gBAAgB,CAACW,KAJnB,CAVkC,CAApC,CAvB2B,CAwC3B;AAEA;;AACA,sBACE,oBAAC,cAAD;AACE,IAAA,CAAC,EAAEH,cADL;AAEE,IAAA,EAAE,EAAET,cAFN;AAGE,IAAA,EAAE,EAAEU,oBAHN;AAIE,IAAA,IAAI,EAAEZ;AAJR,IADF;AAQD,CA5DD;;AA8DA,MAAMe,gBAAgB,gBAAGhC,IAAI,CAACc,yBAAD,CAA7B;AAEA,eAAekB,gBAAf","sourcesContent":["import React, { memo, useMemo } from 'react';\nimport { ViewStyle, I18nManager } from 'react-native';\nimport { Circle, CircleProps } from 'react-native-svg';\nimport Animated, { add, Extrapolate } from 'react-native-reanimated';\nimport type { BackgroundCircleProps } from '../../types';\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\nconst BackgroundCircleComponent = ({\n  index,\n  animatedIndex,\n  color,\n  extendedSize,\n  bottomPosition,\n  screenDimensions,\n  indicatorSize,\n  animatedIndicatorsContainerPosition,\n}: BackgroundCircleProps) => {\n  //#region variables\n  //#endregion\n\n  //#region animations\n  const animatedFocus = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [0, 1, 2],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n  const animatedRadius = useMemo(\n    () =>\n      interpolate(animatedFocus, {\n        inputRange: [0, 1],\n        outputRange: [0, extendedSize],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedFocus, extendedSize]\n  );\n  const animatedLeftPosition = useMemo(\n    () =>\n      add(\n        animatedIndicatorsContainerPosition,\n        indicatorSize / 2,\n        I18nManager.isRTL\n          ? -((index + 1) * indicatorSize)\n          : index * indicatorSize,\n        I18nManager.isRTL ? screenDimensions.width : 0\n      ),\n    [\n      animatedIndicatorsContainerPosition,\n      index,\n      indicatorSize,\n      screenDimensions.width,\n    ]\n  );\n  //#endregion\n\n  // render\n  return (\n    <AnimatedCircle\n      r={animatedRadius}\n      cy={bottomPosition}\n      cx={animatedLeftPosition}\n      fill={color}\n    />\n  );\n};\n\nconst BackgroundCircle = memo(BackgroundCircleComponent);\n\nexport default BackgroundCircle;\n"]}