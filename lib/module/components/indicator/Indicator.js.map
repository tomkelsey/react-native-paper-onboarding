{"version":3,"sources":["Indicator.tsx"],"names":["React","useMemo","useCallback","memo","Animated","Extrapolate","Svg","Circle","styles","interpolate","interpolateV1","interpolateNode","interpolateV2","require","AnimatedCircle","createAnimatedComponent","BORDER_WIDTH","IndicatorComponent","index","indicatorSize","indicatorBackgroundColor","indicatorBorderColor","animatedIndex","item","radius","animatedRadius","inputRange","outputRange","extrapolate","CLAMP","animatedIconScale","animatedIconOpacity","animatedCircleFillOpacity","containerStyle","container","width","height","iconStyle","iconContainer","left","right","top","bottom","borderRadius","opacity","transform","scale","renderIcon","icon","IconComponent","size","Indicator"],"mappings":"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","sourcesContent":["import React, { useMemo, useCallback, memo } from 'react';\nimport { ViewStyle } from 'react-native';\nimport Animated, { Extrapolate } from 'react-native-reanimated';\nimport { Svg, Circle, CircleProps } from 'react-native-svg';\nimport { styles } from './styles';\nimport type { IndicatorProps } from '../../types';\n\nconst {\n  interpolate: interpolateV1,\n  interpolateNode: interpolateV2,\n} = require('react-native-reanimated');\nconst interpolate = interpolateV2 || interpolateV1;\n\nconst AnimatedCircle = Animated.createAnimatedComponent(\n  Circle\n) as React.ComponentClass<\n  Animated.AnimateProps<ViewStyle, CircleProps & { style?: any }>\n>;\n\nconst BORDER_WIDTH = 2;\n\nconst IndicatorComponent = ({\n  index,\n  indicatorSize,\n  indicatorBackgroundColor,\n  indicatorBorderColor,\n  animatedIndex,\n  item,\n}: IndicatorProps) => {\n  const radius = useMemo(() => (indicatorSize - 2) / 2, [indicatorSize]);\n\n  //#region animation\n  const animatedRadius = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [radius * 0.33, radius, radius * 0.33],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index, radius]\n  );\n\n  const animatedIconScale = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index, index + 1],\n        outputRange: [1 * 0.33, 1, 1 * 0.33],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n\n  const animatedIconOpacity = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 0.25, index, index + 0.25],\n        outputRange: [0, 1, 0],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n\n  const animatedCircleFillOpacity = useMemo(\n    () =>\n      interpolate(animatedIndex, {\n        inputRange: [index - 1, index],\n        outputRange: [0, 1],\n        extrapolate: Extrapolate.CLAMP,\n      }),\n    [animatedIndex, index]\n  );\n  //#endregion\n\n  //#region styles\n  const containerStyle = useMemo(\n    () => ({\n      ...styles.container,\n      ...{\n        width: indicatorSize,\n        height: indicatorSize,\n      },\n    }),\n    [indicatorSize]\n  );\n\n  const iconStyle: any = useMemo(\n    () => ({\n      ...styles.iconContainer,\n      ...{\n        left: BORDER_WIDTH * 2,\n        right: BORDER_WIDTH * 2,\n        top: BORDER_WIDTH * 2,\n        bottom: BORDER_WIDTH * 2,\n        borderRadius: indicatorSize,\n        opacity: animatedIconOpacity,\n        transform: [{ scale: animatedIconScale }],\n      },\n    }),\n    [animatedIconOpacity, animatedIconScale, indicatorSize]\n  );\n  //#endregion\n\n  // renders\n  const renderIcon = useCallback(() => {\n    if (item.icon) {\n      const IconComponent: any = item.icon;\n      return (\n        <Animated.View style={iconStyle}>\n          {typeof IconComponent === 'function' ? (\n            IconComponent({\n              size: indicatorSize / 2,\n            })\n          ) : (\n            <IconComponent size={indicatorSize / 2} />\n          )}\n        </Animated.View>\n      );\n    }\n    return null;\n  }, [item, indicatorSize, iconStyle]);\n\n  return (\n    <Animated.View style={containerStyle}>\n      <Svg\n        width={indicatorSize}\n        height={indicatorSize}\n        viewBox={`0 0 ${indicatorSize} ${indicatorSize}`}\n      >\n        <AnimatedCircle\n          r={animatedRadius}\n          cx={indicatorSize / 2}\n          cy={indicatorSize / 2}\n          // @ts-ignore\n          fill={indicatorBackgroundColor}\n          fillOpacity={animatedCircleFillOpacity}\n          stroke={indicatorBorderColor}\n          strokeWidth={BORDER_WIDTH}\n        />\n      </Svg>\n      {renderIcon()}\n    </Animated.View>\n  );\n};\nconst Indicator = memo(IndicatorComponent);\n\nexport default Indicator;\n"]}