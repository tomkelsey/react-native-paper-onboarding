{"version":3,"sources":["CloseButton.tsx"],"names":["React","useMemo","memo","useRef","Text","TouchableOpacity","Animated","round","useValues","get","styles","CloseButtonComponent","data","safeInsets","animatedIndex","closeButton","closeButtonText","closeButtonTextStyle","textStyleOverride","onCloseButtonPress","containerRef","animatedShowButtonOpacityValues","map","item","index","length","showCloseButton","animatedShowButtonPointerEventValues","defaultShowButtonOpacity","Value","defaultShowButtonPointerEvent","animatedShowButtonOpacity","animatedShowButtonPointerEvent","containerStyle","container","opacity","top","textStyle","text","CloseButton"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA6C,OAA7C;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,cAAvC;AACA,OAAOC,QAAP,IAAmBC,KAAnB,QAAgC,yBAAhC;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,qBAA/B;AACA,SAASC,MAAT,QAAuB,UAAvB;AAGA,OAAO,MAAMC,oBAAoB,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,UAFmC;AAGnCC,EAAAA,aAHmC;AAInCC,EAAAA,WAJmC;AAKnCC,EAAAA,eALmC;AAMnCC,EAAAA,oBAAoB,EAAEC,iBANa;AAOnCC,EAAAA;AAPmC,CAAD,KAQZ;AACtB,QAAMC,YAAY,GAAGjB,MAAM,CAAgB,IAAhB,CAA3B,CADsB,CAGtB;;AACA,QAAMkB,+BAA+B,GAAGb,SAAS,CAC/C,GAAGI,IAAI,CAACU,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KACVA,KAAK,KAAKZ,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA6BF,IAAI,CAACG,eAAlC,GAAoD,CAApD,GAAwD,CADvD,CAD4C,CAAjD;AAKA,QAAMC,oCAAoC,GAAGnB,SAAS,CACpD,GAAGI,IAAI,CAACU,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KACVA,KAAK,KAAKZ,IAAI,CAACa,MAAL,GAAc,CAAxB,IAA6BF,IAAI,CAACG,eAAlC,GAAoD,MAApD,GAA6D,MAD5D,CADiD,CAAtD;AAMA,QAAME,wBAAwB,GAAG,IAAItB,QAAQ,CAACuB,KAAb,CAAmB,CAAnB,CAAjC;AACA,QAAMC,6BAA6B,GAAG,IAAIxB,QAAQ,CAACuB,KAAb,CAAmB,MAAnB,CAAtC;AAEA,QAAME,yBAAyB,GAAGtB,GAAG,CACnCY,+BADmC,EAEnCd,KAAK,CAACO,aAAD,CAF8B,EAGnCc,wBAHmC,CAArC;AAMA,QAAMI,8BAA8B,GAAGvB,GAAG,EACxC;AACAkB,EAAAA,oCAFwC,EAGxCpB,KAAK,CAACO,aAAD,CAHmC,EAIxCgB,6BAJwC,CAA1C,CAxBsB,CA8BtB;AAEA;;AACA,QAAMG,cAAmB,GAAGhC,OAAO,CACjC,MAAM,CACJS,MAAM,CAACwB,SADH,EAEJ;AACEC,IAAAA,OAAO,EAAEJ,yBADX;AAEEK,IAAAA,GAAG,EAAEvB,UAAU,CAACuB;AAFlB,GAFI,CAD2B,EAQjC;AACA,GAACvB,UAAD,CATiC,CAAnC;AAWA,QAAMwB,SAAS,GAAGpC,OAAO,CACvB,MAAM,CAACS,MAAM,CAAC4B,IAAR,EAAcpB,iBAAd,CADiB,EAEvB,CAACA,iBAAD,CAFuB,CAAzB,CA5CsB,CAgDtB;;AACA,sBACE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,GAAG,EAAEE,YADP;AAEE,IAAA,aAAa,EAAEY,8BAFjB;AAGE,IAAA,KAAK,EAAEC;AAHT,KAKGlB,WAAW,GACV,OAAOA,WAAP,KAAuB,UAAvB,GACEA,WAAW,EADb,GAGEA,WAJQ,gBAOV,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEI;AAA3B,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEkB;AAAb,KAAyBrB,eAAzB,CADF,CAZJ,CADF;AAmBD,CA5EM;AA8EP,MAAMuB,WAAW,gBAAGrC,IAAI,CAACS,oBAAD,CAAxB;AAEA,eAAe4B,WAAf","sourcesContent":["import React, { useMemo, memo, useRef } from 'react';\nimport { Text, TouchableOpacity } from 'react-native';\nimport Animated, { round } from 'react-native-reanimated';\nimport { useValues, get } from 'react-native-redash';\nimport { styles } from './styles';\nimport type { CloseButtonProps } from '../../types';\n\nexport const CloseButtonComponent = ({\n  data,\n  safeInsets,\n  animatedIndex,\n  closeButton,\n  closeButtonText,\n  closeButtonTextStyle: textStyleOverride,\n  onCloseButtonPress,\n}: CloseButtonProps) => {\n  const containerRef = useRef<Animated.View>(null);\n\n  //#region animations\n  const animatedShowButtonOpacityValues = useValues(\n    ...data.map((item, index) =>\n      index === data.length - 1 || item.showCloseButton ? 1 : 0\n    )\n  );\n  const animatedShowButtonPointerEventValues = useValues(\n    ...data.map((item, index) =>\n      index === data.length - 1 || item.showCloseButton ? 'auto' : 'none'\n    )\n  );\n\n  const defaultShowButtonOpacity = new Animated.Value(0);\n  const defaultShowButtonPointerEvent = new Animated.Value('none');\n\n  const animatedShowButtonOpacity = get(\n    animatedShowButtonOpacityValues,\n    round(animatedIndex),\n    defaultShowButtonOpacity\n  );\n\n  const animatedShowButtonPointerEvent = get(\n    // @ts-ignore\n    animatedShowButtonPointerEventValues,\n    round(animatedIndex),\n    defaultShowButtonPointerEvent\n  ) as any as Animated.Value<'auto' | 'none'>;\n  //#endregion\n\n  //#region styles\n  const containerStyle: any = useMemo(\n    () => [\n      styles.container,\n      {\n        opacity: animatedShowButtonOpacity,\n        top: safeInsets.top,\n      },\n    ],\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [safeInsets]\n  );\n  const textStyle = useMemo(\n    () => [styles.text, textStyleOverride],\n    [textStyleOverride]\n  );\n  //#endregion\n  return (\n    <Animated.View\n      ref={containerRef}\n      pointerEvents={animatedShowButtonPointerEvent}\n      style={containerStyle}\n    >\n      {closeButton ? (\n        typeof closeButton === 'function' ? (\n          closeButton()\n        ) : (\n          closeButton\n        )\n      ) : (\n        <TouchableOpacity onPress={onCloseButtonPress}>\n          <Text style={textStyle}>{closeButtonText}</Text>\n        </TouchableOpacity>\n      )}\n    </Animated.View>\n  );\n};\n\nconst CloseButton = memo(CloseButtonComponent);\n\nexport default CloseButton;\n"]}